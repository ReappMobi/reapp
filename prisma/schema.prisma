generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  email          String       @unique @db.VarChar(255)
  passwordHash   String       @db.Char(60)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  avatar         String?      @db.VarChar(255)
  accountType    AccountType  @default(DONOR)
  follwingCount  Int          @default(0)
  followersCount Int          @default(0)
  Institution    Institution?
  Admin          Admin?
  Donor          Donor?
}

model Admin {
  id        Int     @id @default(autoincrement())
  accountId Int     @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Donor {
  id        Int        @id @default(autoincrement())
  accountId Int        @unique
  account   Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Donations Donation[]
  Like      Like[]
}

model Institution {
  id            Int            @id @default(autoincrement())
  accountId     Int            @unique
  categories    Category[]
  account       Account        @relation(fields: [accountId], references: [id])
  Fields        Field[]
  Posts         Post[]
  Projects      Project[]
  Donations     Donation[]
  Partners      Partner[]
  Volunteers    Volunteer[]
  Collaborators Collaborator[]
}

model Field {
  id            Int         @id @default(autoincrement())
  name          String      @unique @db.VarChar(255)
  value         String      @db.VarChar(255)
  institutionId Int
  Institution   Institution @relation(fields: [institutionId], references: [id])
}

model Post {
  id            Int         @id @default(autoincrement())
  body          String      @db.Text
  mediaUrl      String?     @db.VarChar(255)
  Comments      Comment[]
  Likes         Like[]
  Institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId Int
}

model Like {
  id      Int   @id @default(autoincrement())
  Post    Post  @relation(fields: [postId], references: [id])
  postId  Int
  Donor   Donor @relation(fields: [donorId], references: [id])
  donorId Int
}

model Comment {
  id     Int    @id @default(autoincrement())
  body   String @db.Text
  Post   Post   @relation(fields: [postId], references: [id])
  postId Int
}

model Project {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  description   String      @db.Text
  mediaUrl      String?     @db.VarChar(255)
  bannerUrl     String?     @db.VarChar(255)
  institutionId Int
  Institution   Institution @relation(fields: [institutionId], references: [id])
  Donations     Donation[]
  Categories    Category[]
}

model Donation {
  id                   Int            @id @default(autoincrement())
  amount               Decimal        @db.Decimal(10, 2)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  status               DonationStatus @default(PENDING)
  paymentTransactionId String         @unique
  paymentCheckoutUrl   String
  projectId            Int?
  Project              Project?       @relation(fields: [projectId], references: [id])
  institutionId        Int?
  Institution          Institution?   @relation(fields: [institutionId], references: [id])
  donorId              Int
  Donor                Donor          @relation(fields: [donorId], references: [id])
}

model Category {
  id            Int          @id @default(autoincrement())
  name          String       @unique @db.VarChar(255)
  Institution   Institution? @relation(fields: [institutionId], references: [id])
  institutionId Int?
  Project       Project?     @relation(fields: [projectId], references: [id])
  projectId     Int?
}

model Partner {
  id            Int          @id @default(autoincrement())
  name          String       @unique @db.VarChar(255)
  avatar        String       @db.VarChar(255)
  Institution   Institution? @relation(fields: [institutionId], references: [id])
  institutionId Int?
}

model Volunteer {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(255)
  avatar        String       @db.VarChar(255)
  Institution   Institution? @relation(fields: [institutionId], references: [id])
  institutionId Int?
}

model Collaborator {
  id            Int          @id @default(autoincrement())
  name          String       @db.VarChar(255)
  avatar        String       @db.VarChar(255)
  Institution   Institution? @relation(fields: [institutionId], references: [id])
  institutionId Int?
}

enum AccountType {
  ADMIN
  DONOR
  INSTITUTION
}

enum DonationStatus {
  PENDING
  APPROVED
  REJECTED
}
