generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  ADMIN
  DONOR
  INSTITUTION
}

enum DonationStatus {
  PENDING
  APPROVED
  REJECTED
  FAILED
  CANCELED
}

enum InstitutionMemberType {
  PARTNER
  VOLUNTEER
  COLLABORATOR
}

model Account {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(255)
  email          String       @unique @db.VarChar(255)
  passwordHash   String       @db.Char(60)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  avatar         String?      @db.VarChar(255)
  accountType    AccountType  @default(DONOR)
  followingCount Int          @default(0)
  followersCount Int          @default(0)
  institution    Institution?
  donor          Donor?
}

model Donor {
  id        Int        @id @default(autoincrement())
  account   Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int        @unique
  donations Donation[]
  likes     Like[]
}

model Institution {
  id         Int                 @id @default(autoincrement())
  cnpj       String              @unique
  phone      String              @db.VarChar(20)
  account    Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  Int                 @unique
  category   Category            @relation(fields: [categoryId], references: [id])
  categoryId Int
  fields     InstitutionField[]
  posts      Post[]
  projects   Project[]
  donations  Donation[]
  members    InstitutionMember[]
}

model InstitutionField {
  id            Int         @id @default(autoincrement())
  name          String      @unique @db.VarChar(255)
  value         String      @db.VarChar(255)
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
}

model Post {
  id            Int             @id @default(autoincrement())
  body          String          @db.Text
  comments      Comment[]
  likes         Like[]
  institution   Institution      @relation(fields: [institutionId], references: [id])
  institutionId Int
  mediaId       String?         // Chave estrangeira para MediaAttachment (opcional)
  media         MediaAttachment? @relation(fields: [mediaId], references: [id])  // Relacionamento com MediaAttachment (opcional)
}

model Like {
  id      Int   @id @default(autoincrement())
  post    Post  @relation(fields: [postId], references: [id])
  postId  Int
  donor   Donor @relation(fields: [donorId], references: [id])
  donorId Int
}

model Comment {
  id     Int    @id @default(autoincrement())
  body   String @db.Text
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
}

model Project {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(255)
  description   String      @db.Text
  mediaUrl      String?     @db.VarChar(255)
  bannerUrl     String?     @db.VarChar(255)
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  donations     Donation[]
  categories    Category[]
}

model Donation {
  id                   Int            @id @default(autoincrement())
  amount               Decimal        @db.Decimal(10, 2)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  status               DonationStatus @default(PENDING)
  paymentTransactionId String         @unique
  paymentCheckoutUrl   String
  projectId            Int?
  project              Project?       @relation(fields: [projectId], references: [id])
  institutionId        Int?
  Institution          Institution?   @relation(fields: [institutionId], references: [id])
  donorId              Int
  donor                Donor          @relation(fields: [donorId], references: [id])
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique @db.VarChar(255)
  institutionId Int?
  project       Project?      @relation(fields: [projectId], references: [id])
  projectId     Int?
  Institution   Institution[]
}

model InstitutionMember {
  id            Int                   @id @default(autoincrement())
  name          String                @db.VarChar(50)
  avatar        String                @db.VarChar(255)
  memberType    InstitutionMemberType
  institution   Institution?          @relation(fields: [institutionId], references: [id])
  institutionId Int?
}

model MediaAttachment {
  id                         String    @id
  statusId                   BigInt?
  fileFileName               String?
  fileContentType            String?
  fileFileSize               Int?
  fileUpdatedAt              DateTime?
  remoteUrl                  String    @default("")
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  shortcode                  String?
  type                       Int       @default(0)
  fileMeta                   Json?
  accountId                  BigInt?
  description                String?
  scheduledStatusId          BigInt?
  blurhash                   String?
  processing                 Int?
  fileStorageSchemaVersion   Int?
  thumbnailFileName          String?
  thumbnailContentType       String?
  thumbnailFileSize          Int?
  thumbnailUpdatedAt         DateTime?
  thumbnailRemoteUrl         String?
  posts                      Post[]    // Relacionamento inverso com Post
}
